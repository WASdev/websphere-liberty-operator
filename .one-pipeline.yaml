version: '1'

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "setup"
  
# test:
#   dind: true
#   abort_on_failure: true
#   image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
#   script: |
#     #!/usr/bin/env bash
    
#     ## Setup required tooling
#     wget --header "Accept: application/octet-stream"  "https://golang.org/dl/go1.16.linux-amd64.tar.gz" 
#     rm -rf /usr/local/go && tar -C /usr/local -xf go1.16.linux-amd64.tar.gz
#     export PATH=$PATH:/usr/local/go/bin
#     apt-get update
#     apt-get -y install build-essential

#     # Added `go mod vendor` here because without it, the following error was generated:
#     # go test -v -mod=vendor -tags=unit github.com/WASdev/websphere-liberty-operator/...
#     # go: inconsistent vendoring in /workspace/app/one-pipeline-config-repo:
#     #   ... (list of pkgs) ...
#     #   To ignore the vendor directory, use -mod=readonly or -mod=mod.
#     #   To sync the vendor directory, run:
#     #     go mod vendor
#     # TODO: determine if this is necessary/best solution.
#     go mod vendor
    
#     make unit-test

# static-scan:
#   dind: true
#   image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
#   script: |
#     #!/usr/bin/env bash
#     read -r SONAR_HOST_URL <<< "$(get_env sonarqube | jq -r '.parameters.dashboard_url' | sed 's:/*$::')"
#     read -r SONAR_USER <<< "$(get_env sonarqube | jq -r '.parameters.user_login')"
#     SONARQUBE_INSTANCE_ID=$(get_env sonarqube | jq -r '.instance_id')
#     read -r SONAR_PASS <<< "$(jq -r --arg sonar_instance "$SONARQUBE_INSTANCE_ID" '[.services[] | select(."service_id"=="sonarqube")][] | select(."instance_id"==$sonar_instance) | .parameters.user_password' /toolchain/toolchain.json)"  
#     touch "$WORKSPACE"/websphere-liberty-operator/sonar-project.properties   
#     cat << EOF > "$WORKSPACE"/websphere-liberty-operator/sonar-project.properties
#     sonar.projectKey=websphere-liberty-operator
#     sonar.host.url=$SONAR_HOST_URL
#     sonar.sources=.
#     sonar.login=$SONAR_USER
#     sonar.password=$SONAR_PASS
#     sonar.c.file.suffixes=-
#     sonar.cpp.file.suffixes=-
#     sonar.objc.file.suffixes=-
#     EOF
#     chmod -x "$WORKSPACE"/websphere-liberty-operator/sonar-project.properties
#     #echo "$SONAR_PASS" >> /tmp/sonarqube-token
#     "${COMMONS_PATH}"/static-scan/run.sh

containerize:
  dind: true
  abort_on_failure: true  
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    
    # Download and configure golang
    wget --header "Accept: application/octet-stream"  "https://golang.org/dl/go1.16.linux-amd64.tar.gz" 
    rm -rf /usr/local/go && tar -C /usr/local -xf go1.16.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    apt-get update
    apt-get -qq -y install build-essential software-properties-common uidmap
    
    # Download and install skopeo
    if ! command -v skopeo &> /dev/null; then  
      if [ ! -f "/apt/sources.list.d/devel:kubic:libcontainers:stable.list" ]; then
        sudo sh -c "echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"      
        wget --no-check-certificate -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_18.04/Release.key -O- | sudo apt-key add -
        sudo apt-get update -qq
      fi
      sudo apt-get -y install skopeo
    else
      skopeo --version
    fi  
    
    #  Build images
    export PIPELINE_USERNAME=$(get_env ibmcloud-api-user)
    export PIPELINE_PASSWORD=$(get_env ibmcloud-api-key-staging)  
    export PIPELINE_REGISTRY=$(get_env pipeline-registry)
    export PIPELINE_OPERATOR_IMAGE=$(get_env pipeline-operator-image)
    export RELEASE_TARGET=$(get_env release-target)
    export DOCKER_USERNAME=$(get_env docker-username)
    export DOCKER_PASSWORD=$(get_env docker-password)    
    
    # Build amd64 image
    make build-pipeline-releases
    
    # Build ppc64le and s390x images
    # Disabled for Liberty Operator builds for now
    #./scripts/pipeline/launch-travis.sh -t $(get_env travis-token) -r "https://github.com/WASDev/websphere-liberty-operator" -b $(get_env branch) -l
    
    # Build manifest
    make build-pipeline-manifest
    # Build bundle image
    make setup
    make bundle-pipeline
    # # Build catalog image
    # ## At this time, the script below will call into Enterprise Travis to perform this task
    # echo "**** Calling launch-catalog-build.sh script ****"
    # ./scripts/pipeline/launch-catalog-build.sh -t $(get_env travis-token) -r "https://github.ibm.com/websphere/liberty-operator" -b $(get_env catalog-branch) -n "${BUILD_NUMBER}" -l
    # echo "**** Return from launch-catlog-build.sh script ****"
    # # Save artifacts
    # ## disabled the ppc64le and s380x save for now (see build stanza above).  Once these are built, we can move forward with this section.
    # # declare -a tags=("daily-amd64" "daily-ppc64le" "daily-s390x")
    # echo "**** Saving Artifacts ****"
    # declare -a tags=("daily-amd64")
    # for i in "${tags[@]}"
    # do
    #   IMAGE=$PIPELINE_REGISTRY/$PIPELINE_OPERATOR_IMAGE:$i
    #   DIGEST="$(skopeo inspect docker://$IMAGE | grep Digest | grep -o 'sha[^\"]*')"
    #   ARCH=$(echo $i | cut -d'-' -f 2)
    #   echo "Saving artifact $i name=$IMAGE digest=$DIGEST"
    #   save_artifact $i type=image name="$IMAGE" "digest=$DIGEST" "arch=$ARCH"
    # done
    #declare -a catalogs=("catalog-daily")
    #for i in "${catalogs[@]}"
    #do
    #  IMAGE=$PIPELINE_REGISTRY/$PIPELINE_OPERATOR_IMAGE:$i
    #  DIGEST="$(skopeo inspect docker://$IMAGE | grep Digest | grep -o 'sha[^\"]*')"
    #  #ARCH=$(echo $i | cut -d'-' -f 2)
    #  ARCH=amd64
    #  echo "Saving artifact $i name=$IMAGE digest=$DIGEST"
    #  save_artifact $i type=image name="$IMAGE" "digest=$DIGEST" "arch=$ARCH"
    #done

sign-artifact:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/image-signing:1.0.0@sha256:e9d8e354668ba3d40be2aaee08298d2aa7f0e1c8a1829cca4094ec93830e3e6a
  script: |
    #!/usr/bin/env bash
    echo "sign-artifact"

deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    echo "deploy"

dynamic-scan:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "dynamic-scan"
    #export APP_URL=$(cat ../app-url)
    # feature preview this until evidence locker v2 usage is full feature ready 
    # can be triggered, and owasp will run for preview purposes 
    #source scripts/zap/trigger_api_scan.sh

acceptance-test:
  dind: true
  abort_on_failure: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "acceptance-test"
    # Download and configure golang
    wget --header "Accept: application/octet-stream"  "https://golang.org/dl/go1.16.linux-amd64.tar.gz"
    rm -rf /usr/local/go && tar -C /usr/local -xf go1.16.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    apt-get update
    apt-get -y install build-essential
    export PIPELINE_USERNAME=$(get_env ibmcloud-api-user)
    export PIPELINE_PASSWORD=$(get_env ibmcloud-api-key-staging)
    export PIPELINE_REGISTRY=$(get_env pipeline-registry)
    export PIPELINE_OPERATOR_IMAGE=$(get_env pipeline-operator-image)
    export DOCKER_USERNAME=$(get_env docker-username)
    export DOCKER_PASSWORD=$(get_env docker-password)
    export CLUSTER_URL=$(get_env test-cluster-url)
    export CLUSTER_TOKEN=$(get_env test-cluster-token)
    export TRAVIS_BUILD_NUMBER=$BUILD_NUMBER
    export RELEASE_TARGET=$(get_env release-target)
    make setup
    make test-pipeline-e2e
