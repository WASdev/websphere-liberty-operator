version: "1"

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "setup"
    apt-get update
    apt-get -y install build-essential

    # Download Go
    GO_VERSION=$(get_env go-version)
    if [[ -z "${GO_VERSION}" ]]; then
      GO_VERSION="$(grep '^go [0-9]\+.[0-9]\+' go.mod | cut -d ' ' -f 2)"
    fi
    rm -rf /usr/local/go && wget --no-verbose --header "Accept: application/octet-stream" "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" -O - | tar -xz -C /usr/local/
    export PATH=$PATH:/usr/local/go/bin

    go mod vendor

    ENABLE_BRANCH_PROTECTION=$(get_env enable-branch-protection)
    BRANCH=$(get_env branch)

    # Only enable branch protection on branches that are not "main" or a patch branch (e.g. 1.1.x)
    if [[ "$ENABLE_BRANCH_PROTECTION" == "true" && "$BRANCH" != "main" && ! "$BRANCH" =~ [0-9](.[0-9])?.x ]]; then
      GH_TOKEN=$(get_env git-public-token)
      REPO=$(get_env app-repo)
      REPO="$(echo ${REPO%.git} | sed 's/https:\/\/github.com\///')"

      echo "REPO: $REPO"
      echo "BRANCH: $BRANCH"

      # Commenting this out because it "locks" whatever branch you're building and prevents pushes to it. This is good for a main branch, 
      # but not for dev branches. This means that the branch-protection check will fail. 
      # curl -u :$GH_TOKEN https://api.github.com/repos/$REPO/branches/$BRANCH/protection -H "Accept: application/vnd.github.v3+json" -X PUT -d '{"required_pull_request_reviews":{"dismiss_stale_reviews":true,"required_approving_review_count":1},"enforce_admins":null,"restrictions":null,"required_status_checks":null}'
    fi

    # Only sync-up main branch and actual releases (i.e. 1.0.0 tag)
    if [[ "$BRANCH" == "main" || "$BRANCH" =~ ^[0-9]+.[0-9]+.[0-9]+$ ]]; then
      # Update repo with Whitesource enabled
      GHE_TOKEN=$(get_env git-token)
      WHITESOURCE_GHE_REPO=$(get_env whitesource-ghe-repo | sed 's/https:\/\///')
      BRANCH_REFSPEC="+refs/remotes/origin/$BRANCH:refs/heads/$BRANCH"

      if [[ -n "$(git branch --list -r origin/$BRANCH)" ]]; then
        echo "Pushing branch $BRANCH to $WHITESOURCE_GHE_REPO"
      elif [[ -n "$(git tag --list $BRANCH)" ]]; then
        echo "The given 'branch' ($BRANCH) is a tag. Pushing only tags to $WHITESOURCE_GHE_REPO."
        BRANCH_REFSPEC=""
      else
        echo "Warning: Could not find a matching branch or tag named '$BRANCH'. Trying anyway!"
      fi

      echo "git push --prune https://$GHE_TOKEN@$WHITESOURCE_GHE_REPO $BRANCH_REFSPEC +refs/tags/*:refs/tags/*"
      git push --prune https://$GHE_TOKEN@$WHITESOURCE_GHE_REPO $BRANCH_REFSPEC +refs/tags/*:refs/tags/*
    fi

test:
  dind: true
  abort_on_failure: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    ## Setup required tooling

    # Download Go
    GO_VERSION=$(get_env go-version)
    if [[ -z "${GO_VERSION}" ]]; then
      GO_VERSION="$(grep '^go [0-9]\+.[0-9]\+' go.mod | cut -d ' ' -f 2)"
    fi
    rm -rf /usr/local/go && wget --no-verbose --header "Accept: application/octet-stream" "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" -O - | tar -xz -C /usr/local/
    export PATH=$PATH:/usr/local/go/bin

    apt-get update
    apt-get -y install build-essential

    make unit-test

static-scan:
  dind: true
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    read -r SONAR_HOST_URL <<< "$(get_env sonarqube | jq -r '.parameters.dashboard_url' | sed 's:/*$::')"
    read -r SONAR_USER <<< "$(get_env sonarqube | jq -r '.parameters.user_login')"
    SONARQUBE_INSTANCE_ID=$(get_env sonarqube | jq -r '.instance_id')
    read -r SONAR_PASS <<< "$(jq -r --arg sonar_instance "$SONARQUBE_INSTANCE_ID" '[.services[] | select(."service_id"=="sonarqube")][] | select(."instance_id"==$sonar_instance) | .parameters.user_password' /toolchain/toolchain.json)"  
    touch "$WORKSPACE"/websphere-liberty-operator/sonar-project.properties   
    cat << EOF > "$WORKSPACE"/websphere-liberty-operator/sonar-project.properties
    sonar.projectKey=websphere-liberty-operator
    sonar.host.url=$SONAR_HOST_URL
    sonar.sources=.
    sonar.login=$SONAR_USER
    sonar.password=$SONAR_PASS
    sonar.c.file.suffixes=-
    sonar.cpp.file.suffixes=-
    sonar.objc.file.suffixes=-
    EOF
    chmod -x "$WORKSPACE"/websphere-liberty-operator/sonar-project.properties
    #echo "$SONAR_PASS" >> /tmp/sonarqube-token
    "${COMMONS_PATH}"/static-scan/run.sh

    ## Perform static lint
    ./scripts/pipeline/static-linter-scan.sh --git-token $(get_env git-token) --static-linter-version $(get_env static-linter-version)

deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    echo "deploy"

dynamic-scan:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "dynamic-scan"
    #export APP_URL=$(cat ../app-url)
    # feature preview this until evidence locker v2 usage is full feature ready
    # can be triggered, and owasp will run for preview purposes
    #source scripts/zap/trigger_api_scan.sh

scan-artifact:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
  script: |
    #!/usr/bin/env bash
    echo "twistlock-scan"
    ./scripts/pipeline/twistlock-scan.sh
    echo "VA scan"
    . scripts/pipeline/va_scan
    if which list_artifacts >/dev/null; then
      list_artifacts | while IFS= read -r artifact; do
        image="$(load_artifact "$artifact" "name")"
        type="$(load_artifact "$artifact" "type")"
        digest="$(load_artifact "$artifact" "digest")"
        name="$(echo "$artifact" | awk '{print $1}')"
        if [[ "$type" == "image" ]]; then
          if [[ "$image" == *"icr.io"* ]]; then
            echo "Starting VA scan for $image"
            start_va_scan "$name" "$image" "$digest"
          else
            echo "Skipping VA scan for $image"
          fi
        fi
      done
    fi

    echo "aqua scan"
    # install docker
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    # get aqua scan executables
    git clone https://$(get_env git-token)@github.ibm.com/CICD-CPP/cpp-pipelines.git
    chmod -R +x cpp-pipelines
    # setup and execute aqua scan
    cd cpp-pipelines
    export CUSTOM_SCRIPTS_PATH=/workspace/app/one-pipeline-config-repo/cpp-pipelines
    ./commons/aqua/aqua-local-scan
