apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "liberty.websphere.ibm.com/v1",
          "kind": "WebSphereLibertyApplication",
          "metadata": {
            "name": "websphereliberty-app-sample"
          },
          "spec": {
            "applicationImage": "registry.connect.redhat.com/ibm/open-liberty-samples:springPetClinic"
          }
        },
        {
          "apiVersion": "liberty.websphere.ibm.com/v1",
          "kind": "WebSphereLibertyDump",
          "metadata": {
            "name": "websphereliberty-dump-sample"
          },
          "spec": {
            "include": [
              "thread",
              "heap"
            ],
            "podName": "Specify_Pod_Name_Here"
          }
        },
        {
          "apiVersion": "liberty.websphere.ibm.com/v1",
          "kind": "WebSphereLibertyTrace",
          "metadata": {
            "name": "websphereliberty-trace-sample"
          },
          "spec": {
            "maxFileSize": 20,
            "maxFiles": 5,
            "podName": "Specify_Pod_Name_Here",
            "traceSpecification": "*=info:com.ibm.ws.webcontainer*=all"
          }
        }
      ]
    capabilities: Auto Pilot
    categories: Application Runtime
    certified: "true"
    containerImage: icr.io/cpopen/websphere-liberty-operator:daily
    createdAt: "2022-04-01T15:53:07Z"
    description: Deploy and manage applications running on Liberty
    operators.operatorframework.io/builder: operator-sdk-v1.6.1+git
    operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
    repository: https://github.com/WASdev/websphere-liberty-operator
    support: IBM
  labels:
    operatorframework.io/arch.amd64: supported
    operatorframework.io/os.linux: supported
  name: ibm-websphere-liberty.v1.0.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: Represents the deployment of an WebSphere Liberty application
      displayName: WebSphereLibertyApplication
      kind: WebSphereLibertyApplication
      name: webspherelibertyapplications.liberty.websphere.ibm.com
      resources:
      - kind: Deployment
        name: ""
        version: v1
      - kind: HorizontalPodAutoscaler
        name: ""
        version: v1
      - kind: Route
        name: ""
        version: v1
      - kind: Secret
        name: ""
        version: v1
      - kind: Service
        name: ""
        version: v1
      - kind: ServiceAccount
        name: ""
        version: v1
      - kind: StatefulSet
        name: ""
        version: v1
      specDescriptors:
      - description: Application image to deploy.
        displayName: Application Image
        path: applicationImage
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Required field for autoscaling. Upper limit for the number of pods that can be set by the autoscaler. Parameter .spec.resources.requests.cpu must also be specified.
        displayName: Max Replicas
        path: autoscaling.maxReplicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
      - description: Name of the application. Defaults to the name of this custom resource.
        displayName: Application Name
        path: applicationName
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Lower limit for the number of pods that can be set by the autoscaler.
        displayName: Min Replicas
        path: autoscaling.minReplicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
      - description: Version of the application.
        displayName: Application Version
        path: applicationVersion
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Target average CPU utilization, represented as a percentage of requested CPU, over all the pods.
        displayName: Target CPU Utilization Percentage
        path: autoscaling.targetCPUUtilizationPercentage
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
      - description: Policy for pulling container images. Defaults to IfNotPresent.
        displayName: Pull Policy
        path: pullPolicy
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
      - description: Name of the Secret to use to pull images from the specified repository. It is not required if the cluster is configured with a global image pull secret.
        displayName: Pull Secret
        path: pullSecret
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes:Secret
      - description: Name of the service account to use for deploying the application. A service account is automatically created if it's not specified.
        displayName: Service Account Name
        path: serviceAccountName
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Create Knative resources and use Knative serving.
        displayName: Create Knative Service
        path: createKnativeService
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
      - description: Expose the application externally via a Route, a Knative Route or an Ingress resource.
        displayName: Expose
        path: expose
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
      - description: Number of pods to create. Not applicable when .spec.autoscaling or .spec.createKnativeService is specified.
        displayName: Replicas
        path: replicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podCount
      - description: The port exposed by the container.
        displayName: Service Port
        path: service.port
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
      - displayName: Auto Scaling
        path: autoscaling
      - displayName: Service Type
        path: service.type
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Resource requests and limits for the application container.
        displayName: Resource Requirements
        path: resources
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
      - description: Node proxies this port into your service.
        displayName: Node Port
        path: service.nodePort
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
      - displayName: Probes
        path: probes
      - description: The name for the port exposed by the container.
        displayName: Port Name
        path: service.portName
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - displayName: Deployment
        path: deployment
      - description: Annotations to be added to the service.
        displayName: Service Annotations
        path: service.annotations
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The port that the operator assigns to containers inside pods. Defaults to the value of .spec.service.port.
        displayName: Target Port
        path: service.targetPort
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
      - displayName: StatefulSet
        path: statefulSet
      - displayName: Service
        path: service
      - description: 'A name of a secret that already contains TLS key, certificate and CA to be mounted in the pod. The following keys are valid in the secret: ca.crt, tls.crt, and tls.key.'
        displayName: Certificate Secret Reference
        path: service.certificateSecretRef
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - displayName: Route
        path: route
      - description: An array consisting of service ports.
        displayName: Ports
        path: service.ports
      - description: Expose the application as a bindable service. Defaults to false.
        displayName: Bindable
        path: service.bindable
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
      - displayName: Serviceability
        path: serviceability
      - displayName: Single sign-on
        path: sso
      - displayName: Monitoring
        path: monitoring
      - description: An array of environment variables for the application container.
        displayName: Environment Variables
        path: env
      - description: Specifies the strategy to replace old deployment pods with new pods.
        displayName: Deployment Update Strategy
        path: deployment.updateStrategy
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:updateStrategy
      - description: List of sources to populate environment variables in the application container.
        displayName: Environment Variables from Sources
        path: envFrom
      - description: Represents a volume with data that is accessible to the application container.
        displayName: Volumes
        path: volumes
      - description: Specifies the strategy to replace old StatefulSet pods with new pods.
        displayName: StatefulSet Update Strategy
        path: statefulSet.updateStrategy
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Represents where to mount the volumes into the application container.
        displayName: Volume Mounts
        path: volumeMounts
      - description: List of containers to run before other containers in a pod.
        displayName: Init Containers
        path: initContainers
      - displayName: Storage
        path: statefulSet.storage
      - description: List of sidecar containers. These are additional containers to be added to the pods.
        displayName: Sidecar Containers
        path: sidecarContainers
      - description: A convenient field to set the size of the persisted storage.
        displayName: Storage Size
        path: statefulSet.storage.size
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - displayName: Affinity
        path: affinity
      - description: The directory inside the container where this persisted storage will be bound to.
        displayName: Storage Mount Path
        path: statefulSet.storage.mountPath
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Security context for the application container.
        displayName: Security Context
        path: securityContext
      - description: A YAML object that represents a volumeClaimTemplate component of a StatefulSet.
        displayName: Storage Volume Claim Template
        path: statefulSet.storage.volumeClaimTemplate
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:PersistentVolumeClaim
      - description: Labels to set on ServiceMonitor.
        displayName: Monitoring Labels
        path: monitoring.labels
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: A YAML snippet representing an array of Endpoint component from ServiceMonitor.
        displayName: Monitoring Endpoints
        path: monitoring.endpoints
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:endpointList
      - description: Controls which nodes the pod are scheduled to run on, based on labels on the node.
        displayName: Node Affinity
        path: affinity.nodeAffinity
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:nodeAffinity
      - description: Controls the nodes the pod are scheduled to run on, based on labels on the pods that are already running on the node.
        displayName: Pod Affinity
        path: affinity.podAffinity
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podAffinity
      - description: Enables the ability to prevent running a pod on the same node as another pod.
        displayName: Pod Anti Affinity
        path: affinity.podAntiAffinity
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podAntiAffinity
      - description: A YAML object that contains a set of required labels and their values.
        displayName: Node Affinity Labels
        path: affinity.nodeAffinityLabels
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Annotations to be added to the Route.
        displayName: Route Annotations
        path: route.annotations
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Hostname to be used for the Route.
        displayName: Route Host
        path: route.host
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Path to be used for Route.
        displayName: Route Path
        path: route.path
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: 'A name of a secret that already contains TLS key, certificate and CA to be used in the route. It can also contain destination CA certificate. The following keys are valid in the secret: ca.crt, destCA.crt, tls.crt, and tls.key.'
        displayName: Certificate Secret Reference
        path: route.certificateSecretRef
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: TLS termination policy. Can be one of edge, reencrypt and passthrough.
        displayName: Termination
        path: route.termination
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: HTTP traffic policy with TLS enabled. Can be one of Allow, Redirect and None.
        displayName: Insecure Edge Termination Policy
        path: route.insecureEdgeTerminationPolicy
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Periodic probe of container liveness. Container will be restarted if the probe fails.
        displayName: Liveness Probe
        path: probes.liveness
      - description: Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails.
        displayName: Readiness Probe
        path: probes.readiness
      - description: Probe to determine successful initialization. If specified, other probes are not executed until this completes successfully.
        displayName: Startup Probe
        path: probes.startup
      statusDescriptors:
      - displayName: Service Binding
        path: binding
      - displayName: Status Conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      - description: Service Binding Secret
        displayName: Secret
        path: binding.name
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes:Secret
      version: v1
    - description: Day-2 operation for generating server dumps
      displayName: WebSphereLibertyDump
      kind: WebSphereLibertyDump
      name: webspherelibertydumps.liberty.websphere.ibm.com
      statusDescriptors:
      - description: Location of the generated dump file
        displayName: Dump File Path
        path: dumpFile
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      version: v1
    - description: Day-2 operation for gathering server traces
      displayName: WebSphereLibertyTrace
      kind: WebSphereLibertyTrace
      name: webspherelibertytraces.liberty.websphere.ibm.com
      version: v1
  displayName: WebSphere Liberty
  description: |
        This advanced Operator can be used to deploy and manage WebSphere Liberty applications with consistent, production-grade QoS. This operator is based on the [Runtime Component Operator](https://github.com/application-stacks/runtime-component-operator) and provides all of its capabilities in addition to WebSphere Liberty specific features such as gathering traces and dumps (Day-2 operations) and easily configuring and managing the single sign-on information for your WebSphere Liberty applications.
    
        WebSphere Liberty Operator enables enterprise architects to govern the way their applications get deployed & managed in the cluster, while dramatically reducing the learning curve for developers to deploy into Kubernetes - allowing them to focus on writing the code! Here are some key features:
    
        #### Application Lifecyle
        You can deploy your WebSphere Liberty application container by either pointing to a container image, or an OpenShift ImageStream. When using an ImageStream the Operator will watch for any updates and will re-deploy the modified image.
    
        #### Custom RBAC
        This Operator is capable of using a custom ServiceAccount from the caller, allowing it to follow RBAC restrictions. By default it creates a ServiceAccount if one is not specified, which can also be bound with specific roles.
    
        #### Environment Configuration
        You can configured a variety of artifacts with your deployment, such as: labels, annotations, and environment variables from a ConfigMap, a Secret or a value.
    
        #### Routing
        Expose your application to external users via a single toggle to create a Route on OpenShift or an Ingress on other Kubernetes environments. Advanced configuration, such as TLS settings, are also easily enabled. Expiring Route certificates are re-issued.
    
        #### High Availability via Horizontal Pod Autoscaling
        Run multiple instances of your application for high availability. Either specify a static number of replicas or easily configure horizontal auto scaling to create (and delete) instances based on resource consumption.
    
        #### Persistence and advanced storage
        Enable persistence for your application by specifying simple requirements: just tell us the size of the storage and where you would like it to be mounted and We will create and manage that storage for you. This toggles a StatefulSet resource instead of a Deployment resource, so your container can recover transactions and state upon a pod restart. We offer an advanced mode where the user specifies a built-in PersistentVolumeClaim, allowing them to configure many details of the persistent volume, such as its storage class and access mode. You can also easily configure and use a single storage for serviceability related Day-2 operations, such as gatherig server traces and dumps.
    
        #### Service Binding
        Your runtime components can expose services by a simple toggle. We take care of the heavy lifting such as creating kubernetes Secrets with information other services can use to bind. We also keep the bindable information synchronized, so your applications can dynamically reconnect to its required services without any intervention or interruption.
    
        #### Single Sign-On (SSO)
        WebSphere Liberty provides capabilities to delegate authentication to external providers. Your application users can log in using their existing social media credentials from providers such as Google, Facebook, LinkedIn, Twitter, GitHub, and any OpenID Connect (OIDC) or OAuth 2.0 clients. WebSphere Liberty Operator allows to easily configure and manage the single sign-on information for your applications.
    
        #### Exposing metrics to Prometheus
        The WebSphere Liberty Operator exposes the runtime container's metrics via the [Prometheus Operator](https://operatorhub.io/operator/prometheus). Users can pick between a basic mode, where they simply specify the label that Prometheus is watching to scrape the metrics from the container, or they can specify the full `ServiceMonitor` spec embedded into the WebSphereLibertyApplication's `spec.monitoring` key controlling things like the poll internal and security credentials.
    
        #### Easily mount logs and transaction directories
        If you need to mount the logs and transaction data from your application to an external volume such as NFS (or any storage supported in your cluster), simply add the following (customizing the folder location and size) to your WebSphereLibertyApplication CR: ``` storage: size: 2Gi mountPath: \"/logs\" ```
    
        #### Integration with OpenShift's Certificate Manager
        The WebSphere Liberty Operator takes advantage of the [cert-manager tool](https://cert-manager.io/), if it is installed on the cluster. This allows the operator to automatically provision TLS certificates for pods as well as routes. When creating certificates via the WebSphereLibertyApplication CR the user can specify a particular issuer name and toggle the scopes between ClusterIssuer (cluster scoped) and Issuer (namespace scoped). If not specified, these values are retrieved from a ConfigMap, with a default value of `self-signed` and `ClusterIssuer`. The certificate is mounted into the container via a Secret so that it is automatically refreshed once the certificate is updated.
    
        #### Integration with OpenShift Serverless
        Deploy your serverless runtime component using a single toggle.  The Operator will convert all of its generated resources into [Knative](https://knative.dev) resources, allowing your pod to automatically scale to 0 when it is idle.
    
        #### Integration with OpenShift's Topology UI
        We set the corresponding labels to support OpenShift's Developer Topology UI, which allows you to visualize your entire set of deployments and how they are connected.
    
        See our [**documentation**](https://github.com/WASdev/websphere-liberty-operator/tree/master/doc/) for more information.
  icon:
  - base64data: PHN2ZyBpZD0iV2Vic3BoZXJlTGliZXJ0eSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgMzIgMzIiPjxkZWZzPjxsaW5lYXJHcmFkaWVudCBpZD0ia2MxZXdoeGhoYSIgeDE9IjE2IiB5MT0iMjkiIHgyPSIxNiIgeTI9IjMiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIj48c3RvcCBvZmZzZXQ9IjAiIHN0b3AtY29sb3I9IiNmZmYiIHN0b3Atb3BhY2l0eT0iMCIvPjxzdG9wIG9mZnNldD0iLjI2IiBzdG9wLWNvbG9yPSIjZmZmIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9InNsMGYxYWJudGIiIHgxPSIyIiB5MT0iMjIuNSIgeDI9IjMwIiB5Mj0iMjIuNSIgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiPjxzdG9wIG9mZnNldD0iLjM1IiBzdG9wLWNvbG9yPSIjZmZmIi8+PHN0b3Agb2Zmc2V0PSIuNyIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPSJhd3JyY2JjcXJjIiB4MT0iMi40NSIgeTE9IjEyLjgzOSIgeDI9IjE2IiB5Mj0iMTIuODM5IiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSI+PHN0b3Agb2Zmc2V0PSIwIiBzdG9wLWNvbG9yPSIjZmZmIiBzdG9wLW9wYWNpdHk9IjAiLz48c3RvcCBvZmZzZXQ9Ii44IiBzdG9wLWNvbG9yPSIjZmZmIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9IndvcGp4c3V4NGUiIHkxPSIzMiIgeDI9IjMyIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSI+PHN0b3Agb2Zmc2V0PSIuMSIgc3RvcC1jb2xvcj0iI2E1NmVmZiIvPjxzdG9wIG9mZnNldD0iLjkiIHN0b3AtY29sb3I9IiMwZjYyZmUiLz48L2xpbmVhckdyYWRpZW50PjxtYXNrIGlkPSI2a3kxMnd4eDlkIiB4PSIwIiB5PSIwIiB3aWR0aD0iMzIiIGhlaWdodD0iMzIiIG1hc2tVbml0cz0idXNlclNwYWNlT25Vc2UiPjxwYXRoIHN0eWxlPSJmaWxsOnVybCgja2MxZXdoeGhoYSkiIGQ9Ik0xNSAzaDJ2MjZoLTJ6Ii8+PHBhdGggZD0iTTE2IDMwQTE0LjAxNSAxNC4wMTUgMCAwIDEgMiAxNmwxLTEgMSAxYTEyIDEyIDAgMCAwIDI0IDBoMmExNC4wMTUgMTQuMDE1IDAgMCAxLTE0IDE0eiIgc3R5bGU9ImZpbGw6dXJsKCNzbDBmMWFibnRiKSIvPjxwYXRoIGQ9Ik0xNiAyMmEyMi43NCAyMi43NCAwIDAgMS0xMy41NS00LjA4OGwxLjIxMi0xLjU5MUEyMC43MTYgMjAuNzE2IDAgMCAwIDE2IDIweiIgc3R5bGU9ImZpbGw6I2ZmZiIvPjxwYXRoIGQ9Ik0zLjY2MiAxNS42NzkgMi40NSAxNC4wODhBMjIuNzM2IDIyLjczNiAwIDAgMSAxNiAxMHYyYTIwLjcxNiAyMC43MTYgMCAwIDAtMTIuMzM4IDMuNjc5eiIgc3R5bGU9ImZpbGw6dXJsKCNhd3JyY2JjcXJjKSIvPjxwYXRoIGQ9Ik00IDE2SDJBMTQuMDA2IDE0LjAwNiAwIDAgMSAyMS44NTUgMy4yOEwyMS4wMiA1LjFBMTIuMDA4IDEyLjAwOCAwIDAgMCA0IDE2eiIgc3R5bGU9ImZpbGw6I2ZmZiIvPjwvbWFzaz48L2RlZnM+PGcgc3R5bGU9Im1hc2s6dXJsKCM2a3kxMnd4eDlkKSI+PHBhdGggc3R5bGU9ImZpbGw6dXJsKCN3b3BqeHN1eDRlKSIgZD0iTTAgMGgzMnYzMkgweiIvPjwvZz48cGF0aCBkPSJNMjcgMTRhMy42MTUgMy42MTUgMCAwIDEgLjgzMi0xLjk0NUE1LjMzNCA1LjMzNCAwIDAgMCAyOSA5aC0yYTMuNjE1IDMuNjE1IDAgMCAxLS44MzIgMS45NDVBNS4zMzQgNS4zMzQgMCAwIDAgMjUgMTR6IiBzdHlsZT0iZmlsbDojMDAxZDZjIi8+PHBhdGggZD0iTTI1IDE5YTUuMDA2IDUuMDA2IDAgMCAwIDUtNWgtMmEzIDMgMCAwIDEtNiAwYzAtMS40ODguOC0yLjUyIDEuNzM2LTMuNzE2QTguMjMxIDguMjMxIDAgMCAwIDI2IDVWNGgtMnYxYzAgMS42OTEtLjg1NCAyLjc4Ny0xLjg0MiA0LjA1NUE3LjgxMSA3LjgxMSAwIDAgMCAyMCAxNGE1LjAwNiA1LjAwNiAwIDAgMCA1IDV6TTI4LjUgMjAuMDY0YTcuMTI2IDcuMTI2IDAgMCAxLTcgMGwtMSAxLjczMWE4Ljk0MyA4Ljk0MyAwIDAgMCAzLjUgMS4xMzlWMjhoMnYtNS4wNjZhOC45NDMgOC45NDMgMCAwIDAgMy41LTEuMTM0eiIgc3R5bGU9ImZpbGw6IzAwMWQ2YyIvPjwvc3ZnPg==
    mediatype: image/svg+xml
  install:
    spec:
      deployments:
      - name: wlo-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              app.kubernetes.io/instance: websphere-liberty-operator
              app.kubernetes.io/managed-by: olm
              app.kubernetes.io/name: websphere-liberty-operator
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: websphere-liberty-operator
                app.kubernetes.io/managed-by: olm
                app.kubernetes.io/name: websphere-liberty-operator
                control-plane: controller-manager
            spec:
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - key: kubernetes.io/arch
                        operator: In
                        values:
                        - amd64
              containers:
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --enable-leader-election
                command:
                - /manager
                env:
                - name: OPERATOR_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                image: icr.io/cpopen/websphere-liberty-operator:daily
                livenessProbe:
                  failureThreshold: 3
                  httpGet:
                    path: /healthz
                    port: 8081
                    scheme: HTTP
                  initialDelaySeconds: 90
                  periodSeconds: 30
                  successThreshold: 1
                  timeoutSeconds: 10
                name: manager
                readinessProbe:
                  failureThreshold: 3
                  httpGet:
                    path: /readyz
                    port: 8081
                    scheme: HTTP
                  initialDelaySeconds: 20
                  periodSeconds: 30
                  successThreshold: 1
                  timeoutSeconds: 10
                resources:
                  limits:
                    cpu: 200m
                    memory: 256Mi
                  requests:
                    cpu: 100m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
                  privileged: false
                  readOnlyRootFilesystem: true
                  runAsNonRoot: true
              securityContext:
                runAsNonRoot: true
              serviceAccountName: wlo-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - create
          - delete
          - get
          - list
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - create
          - delete
          - get
          - list
          - update
        - apiGroups:
          - apps
          resources:
          - deployments
          - statefulsets
          verbs:
          - create
          - delete
          - list
          - update
          - watch
        - apiGroups:
          - apps
          resources:
          - deployments/finalizers
          - statefulsets
          verbs:
          - update
        - apiGroups:
          - autoscaling
          resources:
          - horizontalpodautoscalers
          verbs:
          - create
          - delete
          - list
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - configmaps
          - persistentvolumeclaims
          - secrets
          - serviceaccounts
          - services
          verbs:
          - create
          - delete
          - list
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - pods
          - pods/exec
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - image.openshift.io
          resources:
          - imagestreams
          - imagestreamtags
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - liberty.websphere.ibm.com
          resources:
          - webspherelibertyapplications
          - webspherelibertyapplications/finalizers
          - webspherelibertyapplications/status
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - liberty.websphere.ibm.com
          resources:
          - webspherelibertydumps
          - webspherelibertydumps/finalizers
          - webspherelibertydumps/status
          verbs:
          - create
          - delete
          - list
          - update
          - watch
        - apiGroups:
          - liberty.websphere.ibm.com
          resources:
          - webspherelibertytraces
          - webspherelibertytraces/finalizers
          - webspherelibertytraces/status
          verbs:
          - create
          - delete
          - list
          - update
          - watch
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - create
          - delete
          - list
          - update
          - watch
        - apiGroups:
          - networking.k8s.io
          resources:
          - ingresses
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - route.openshift.io
          resources:
          - routes
          - routes/custom-host
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - security.openshift.io
          resourceNames:
          - restricted
          resources:
          - securitycontextconstraints
          verbs:
          - use
        - apiGroups:
          - serving.knative.dev
          resources:
          - services
          verbs:
          - create
          - delete
          - list
          - update
          - watch
        serviceAccountName: wlo-controller-manager
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - WebSphere Liberty
  - MicroProfile
  - Jakarta EE
  - Java
  - Application Server
  - Application Runtime
  - Runtime
  - Spring
  - Application
  - Open Source
  - WebSphereLiberty
  - WLO
  links:
  - name: Documentation
    url: https://github.com/WASdev/websphere-liberty-operator/tree/master/doc
  - name: WebSphere Liberty
    url: https://openliberty.io/
  - name: WebSphere Liberty Images
    url: https://github.com/WASdev/ci.docker
  maintainers:
  - email: arturdzm@ibm.com
    name: Artur Dzmitryieu
  - email: leojc@ca.ibm.com
    name: Leo Christy Jesuraj
  maturity: beta
  provider:
    name: IBM
  version: 1.0.0
